---
- block:
    - name: Synchroniser le répertoire local avec S3
      vars:
          ansible_python_interpreter: /usr/local/bin/python3.8
      aws_s3:
          bucket: "{{ s3_bucket_name }}"
          object: "{{ s3_remote_directory_db }}/{{ s3_filename_db }}"
          dest: "{{ compose_project_dir }}/s3_db_restore/{{ s3_filename_db }}"
          mode: get
          secret_key: "{{ aws_secret_key }}"
          access_key: "{{ aws_access_key}}"
          region: "{{ region }}"
          
    - name: Supprimer le conteneur Docker site-vitrine-db s'il existe
      shell: docker stop {{ db_container_name }} && docker rm  {{ db_container_name }}
      ignore_errors: true
    
    - name: Supprimer le volume Docker site-vitrine-db-data s'il existe
      shell: docker volume rm -f {{ db_volume_name }}
      ignore_errors: true
    
    - name: Démarrer le conteneur Docker site-vitrine-db
      shell: cd {{ site_vitrine_directory }} && /usr/local/bin/docker-compose --compatibility up -d {{ db_container_name }}
      
    - name: Copier le fichier de sauvegarde vers le conteneur
      command: docker cp {{ restore_db_name.restore_files_path }}/{{ restore_db_name.restore_pattern }} {{ db_container_name }}:{{ restore_db_name.restore_pattern }}

    - name: patienter avant de continuer
      command: sleep 4

    - name: Restaurer le fichier SQL dans la base de données MySQL
      command: docker exec -i {{ db_container_name }} sh -c "exec mysql  -u{{ wp_db_user }} -p{{ wp_db_psw }} {{ wp_db_name }} < {{ restore_db_name.restore_pattern }}"
      
    - name: Remove file from wordpress container
      command: docker exec {{ db_container_name }} sh -c 'rm ./*.sql'

  tags:
    - restore_db_s3

