- name: Renommer le fichier de backup avec le mois en cours
  tags:
    - cleanup_backup_semaphore
  block:
    - name: Get the current date in UTC
      ansible.builtin.command: date -u +"%Y-%m-%d"
      register: current_date

    - name: Get the current month in UTC
      ansible.builtin.command: date -u +"%B"
      register: current_month

    - name: List files in S3 bucket
      ansible.builtin.command: >
        /usr/local/bin/python3.8 -m awscli s3 ls s3://{{ s3_bucket_name }}/{{ bd_semaphore }}/ --recursive
      register: s3_files
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

    - name: Extract and sort backup files by date
      ansible.builtin.shell: |
        echo "{{ s3_files.stdout_lines | join('\n') }}" | \
        grep 'backup_' | \
        awk '{print $4}' | \
        sed 's/^.{67}\(.\{10\}\).*/\1 \0/' | \
        sort -r | \
        awk '{print $2}'
      register: sorted_backup_files

    - name: Debug sorted backup files
      ansible.builtin.debug:
        var: sorted_backup_files.stdout_lines

    - name: Set most recent backup file
      ansible.builtin.set_fact:
        most_recent_backup: "{{ sorted_backup_files.stdout_lines[0] }}"

    - name: Debug most recent backup file
      ansible.builtin.debug:
        var: most_recent_backup

    - name: Delete old backup files
      ansible.builtin.shell: |
        for file in {{ sorted_backup_files.stdout_lines[1:] | join(' ') }}; do
          /usr/local/bin/python3.8 -m awscli s3 rm s3://{{ s3_bucket_name }}/$file;
        done
      when: sorted_backup_files.stdout_lines | length > 1
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"

    - name: Rename the most recent backup file
      ansible.builtin.command: >
        /usr/local/bin/python3.8 -m awscli s3 mv s3://{{ s3_bucket_name }}/{{ most_recent_backup }} s3://{{ s3_bucket_name }}/{{ bd_semaphore }}/{{ current_month.stdout }}_{{ most_recent_backup.split('/')[-1] }}
      when: most_recent_backup is defined
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
